{"version":3,"sources":["components/navigation/navBar.module.scss","components/auth/auth.module.scss","components/main/main.module.scss","components/own/ownRecipe.module.scss","redux/reducers/authReducer.js","redux/store/redux-store.js","components/auth/Auth.jsx","components/main/Main.jsx","components/navigation/Navbar.jsx","components/own/OwnRecipe.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","login","password","initialized","LOGIN","PASSWORD","authReducer","state","action","type","redusers","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Auth","className","style","authContainer","Main","mainContainer","Navigation","props","navItem","to","link","activeClassName","activeLink","content","NavBar","navBarContainer","OwnRecipe","ownRecipe","connect","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,gBAAkB,kC,mBCApCD,EAAOC,QAAU,CAAC,cAAgB,8B,mBCAlCD,EAAOC,QAAU,CAAC,cAAgB,8B,mBCAlCD,EAAOC,QAAU,CAAC,UAAY,+B,gMCDxBC,EAAe,CACnBC,MAAO,GACPC,SAAU,GACVC,aAAa,GAqBTC,EAAQ,QACRC,EAAW,WAEFC,EArBK,WAAmC,IAAlCC,EAAiC,uDAAzBP,EAAcQ,EAAW,uCACpD,OAAQA,EAAOC,MACb,KAAKL,EACH,OAAO,2BACFG,GADL,IAEEN,MAAOO,EAAOP,QAElB,KAAKI,EACH,OAAO,2BACFE,GADL,IAEEL,SAAUM,EAAON,WAGrB,QACE,OAAOK,IChBTG,EAAWC,YAAgB,CAC7BL,gBAGIM,EAAmBC,OAAOC,sCAAwCC,IAMzDC,EALHC,YACVP,EACAE,EAAiBM,YAAgBC,O,gCCGpBC,EAXF,WACX,OACE,yBAAKC,UAAWC,IAAMC,eACpB,0BAAMf,OAAO,IACX,2BAAOC,KAAK,SACZ,2BAAOA,KAAK,Y,iBCDLe,EAJF,WACX,OAAO,yBAAKH,UAAWC,IAAMG,eAAtB,S,iBCUHC,EAAa,SAACC,GAClB,OACE,yBAAKN,UAAWC,IAAMM,SACpB,kBAAC,IAAD,CAASC,GAAIF,EAAMG,KAAMC,gBAAiBT,IAAMU,YAC7CL,EAAMM,WAMAC,EApBA,WACb,OACE,yBAAKb,UAAWC,IAAMa,iBACpB,kBAAC,EAAD,CAAYL,KAAK,SAASG,QAAQ,UAClC,kBAAC,EAAD,CAAYH,KAAK,QAAQG,QAAQ,SACjC,kBAAC,EAAD,CAAYH,KAAK,aAAaG,QAAQ,iB,iBCF7BG,EAJG,WAChB,OAAO,yBAAKf,UAAWC,IAAMe,WAAtB,e,MCmBT,IAGeC,eAHS,SAAC/B,GAAD,MAAY,CAClCJ,YAAaI,EAAMD,YAAYH,eAElBmC,EAhBf,SAAaX,GACX,OACE,yBAAKN,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOkB,KAAK,QAAQC,UAAW,kBAAM,kBAAC,EAAD,SACrC,kBAAC,IAAD,CAAOD,KAAK,SAASC,UAAW,kBAAM,kBAAC,EAAD,SACtC,kBAAC,IAAD,CAAOD,KAAK,aAAaC,UAAW,kBAAM,kBAAC,EAAD,cCL9BC,QACW,cAA7B5B,OAAO6B,SAASC,UAEe,UAA7B9B,OAAO6B,SAASC,UAEhB9B,OAAO6B,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAU/B,MAAOA,GACf,kBAAC,EAAD,SAINgC,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1ab7fe60.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navBarContainer\":\"navBar_navBarContainer__2W2wx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"authContainer\":\"auth_authContainer__11GTM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"main_mainContainer__k5gkf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ownRecipe\":\"ownRecipe_ownRecipe__3xnCA\"};","const initialState = {\r\n  login: \"\",\r\n  password: \"\",\r\n  initialized: false,\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case LOGIN:\r\n      return {\r\n        ...state,\r\n        login: action.login,\r\n      };\r\n    case PASSWORD:\r\n      return {\r\n        ...state,\r\n        password: action.password,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst LOGIN = \"LOGIN\";\r\nconst PASSWORD = \"PASSWORD\";\r\n\r\nexport default authReducer;\r\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport authReducer from \"../reducers/authReducer\";\r\n\r\nlet redusers = combineReducers({\r\n  authReducer,\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nlet store = createStore(\r\n  redusers,\r\n  composeEnhancers(applyMiddleware(thunkMiddleware))\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport style from \"./auth.module.scss\";\r\n\r\nconst Auth = () => {\r\n  return (\r\n    <div className={style.authContainer}>\r\n      <form action=\"\">\r\n        <input type=\"text\" />\r\n        <input type=\"text\" />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n","import React from \"react\";\r\nimport style from \"./main.module.scss\";\r\n\r\nconst Main = () => {\r\n  return <div className={style.mainContainer}>Main</div>;\r\n};\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\nimport style from \"./navBar.module.scss\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst NavBar = () => {\r\n  return (\r\n    <div className={style.navBarContainer}>\r\n      <Navigation link=\"/login\" content=\"Login\" />\r\n      <Navigation link=\"/main\" content=\"Main\" />\r\n      <Navigation link=\"/ownRecipe\" content=\"Own recipe\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Navigation = (props) => {\r\n  return (\r\n    <div className={style.navItem}>\r\n      <NavLink to={props.link} activeClassName={style.activeLink}>\r\n        {props.content}\r\n      </NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport style from \"./ownRecipe.module.scss\";\r\n\r\nconst OwnRecipe = () => {\r\n  return <div className={style.ownRecipe}>own recipe</div>;\r\n};\r\n\r\nexport default OwnRecipe;\r\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Auth from \"./components/auth/Auth\";\nimport Main from \"./components/main/Main\";\nimport NavBar from \"./components/navigation/Navbar\";\nimport OwnRecipe from \"./components/own/OwnRecipe\";\n//import { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport \"./App.css\";\n\nfunction App(props) {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <Switch>\n        <Route path=\"/main\" component={() => <Main />} />\n        <Route path=\"/login\" component={() => <Auth />} />\n        <Route path=\"/ownRecipe\" component={() => <OwnRecipe />} />\n      </Switch>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  initialized: state.authReducer.initialized,\n});\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store/redux-store\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}